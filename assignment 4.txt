44.	Create three classes
-	Faculty with two data members facultyId and salary and two methods, one intput() method for accepting facultyId as input and another printSalary() to print salary.
-	FullTimeFaculty that inherits class Faculty with two data members’ basicSalary and allowance. Override input() method in this class that calls super class inut() method and accepts basicSalary and allowance as input. Salary should not be accepted as input but should be calculated using formula (basicSalary + allowance)
-	PartTimeFaculty that inherits class Faculty with two data members’ workingHours, ratePerHour. Override input() method in this class that calls super class inut() method and accepts workingHours and ratePerHour as input. Salary should not be accepted as input but should be calculated using formula ( workingHour * ratePerHour )

import java.util.Scanner;

class Faculty{
		private int facultyId;
		private double salary;
		
		Faculty(){
			facultyId = 0;
			salary = 3000;
		}
		
		Faculty(int facultyId){

			this.facultyId = facultyId;
		}

		void input(int facultyId){
		
			this.facultyId = facultyId;
		}
		void setSalary(double salary){
			
			this.salary = salary;
		}

		void printSalary(){
			
			System.out.println("\nFaculty Id : " + facultyId + "\nSalary : " + salary+"\n");
		}
}
		
class FullTimeFaculty extends Faculty{
		
		private double basicSalary;
		private double allowance;
		
		FullTimeFaculty(){
			basicSalary = 5000;
			allowance = 0.5;
		}
		
		FullTimeFaculty(int facultyId){

			super(facultyId);
		}
		
		void input(double basicSalary,double allowance){

			this.basicSalary = basicSalary;
			this.allowance = allowance;
			super.setSalary(basicSalary + allowance);
		}

}

class PartTimeFaculty extends Faculty{
		
		private double workingHours;
		private double ratePerHour;
		
		PartTimeFaculty(){
			workingHours = 0;
			ratePerHour = 100;
		}

		PartTimeFaculty(int facultyId){

			super(facultyId);
		}
		
		void input(double workingHours,double ratePerHour){
			
			this.workingHours = workingHours;
			this.ratePerHour = ratePerHour;
			super.setSalary(workingHours * ratePerHour);

		}
}

class Que44{
	public static void main(String []args){
		
			Scanner sc = new Scanner(System.in);
			System.out.print("Enter Details for Full time Faculty : \nFacultyId : ");
			int fac = sc.nextInt();
			System.out.print("Basic Salary : ");
			double basic = sc.nextDouble();
			System.out.print("Allowance : ");
			double allowance = sc.nextDouble();
			
			FullTimeFaculty f1 = new FullTimeFaculty(fac);
			f1.input(basic,allowance);
			
			System.out.print("Enter Details for Part time Faculty : \nFacultyId : ");
			fac = sc.nextInt();
			System.out.print("Working Hour : ");
			basic = sc.nextDouble();
			System.out.print("Rate per Hour : ");
			allowance = sc.nextDouble();
			PartTimeFaculty p1 = new PartTimeFaculty(fac);
			p1.input(basic,allowance);
			f1.printSalary();
			p1.printSalary();
			sc.close();
	}
}	

====================================================================

45.	Create a class Student with two members : rollno and percentage. Create default and parameterized constructors. Create method show() to display information. Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays semester. Create another class SchoolStudent inherits Student class. Add a new member className(eg 12th ,10th etc.) to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays className. Create a class( say Demo) with main method that carries out the operation of the project : -- has array to store objects of any class(Student,  CollegeStudent or SchoolStudent) --create two CollegeStudent  and three SchoolStudent objects and store them inside the array -- display all records from the array -- search record on the basic of rollno and check given rollno is of SchoolStudent or of CollegeStudent. --count how many students are having A grade, if for A grade percentage >75. 

import java.util.Scanner;

class Student1{
	private int rollno;
	private double percentage;
	
	Student1(){
		rollno = 0;
		 percentage = 0;
	}
	
	Student1(int rollno,double percentage){
		this.rollno = rollno;
		this.percentage = percentage;
	}

	int getRollNo(){
		return rollno;
	}
	double getPercentage(){
		return percentage;
	}

	void show(){
		
		System.out.println("\nRoll No. : " + rollno + "\nPercentage : " + percentage+"%");
		}
}

class CollegeStudent extends Student1{
	private int semester;
	
	CollegeStudent(){
		semester = 1;
	}

	CollegeStudent(int rollno,double percent,int semester){
		super(rollno,percent);
		this.semester = semester;
	}

	void show(){
		super.show();
		System.out.println("Semester : " + semester);
	}
	
}

class SchoolStudent extends Student1{
		private String className;

		SchoolStudent(){
			className = "10th";
		}
		
		SchoolStudent(int rollno,double percent,String className){
			super(rollno,percent);
			this.className = className;
		}

		void show(){
			super.show();
			System.out.println("Class Name : " + className);
		}
}

class Que45{
	public static void main(String[]args){

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Details : ");	
		
		//1)Array of any class

		System.out.print("No of College Student : " );
		int no = sc.nextInt();
		CollegeStudent arr[] = new CollegeStudent[no];
		for(int i=0;i<no;i++){
		
			System.out.print("\nStudent "+(i+1)+"th : \nRoll No. : ");
			int rollno = sc.nextInt();
			System.out.print("Percentagae : " );
			double percent = sc.nextDouble();
			System.out.print("Semester : ");
			int semester = sc.nextInt();

			arr[i] = new CollegeStudent(rollno,percent,semester);
		}
		
		System.out.println("\nDisplay Array of College Student : ");
		for(CollegeStudent i : arr){
			i.show();
		}	
		
		//2)create 2 collegeStudent 3 SchoolStudent
		
		System.out.print("\nNo. of All Student : " );
		no = sc.nextInt();
		Student1 arr1[] = new Student1[no];
		for(int i=0;i<no;i++){
			
			System.out.print("\nStudent "+(i+1)+"th : ");
			System.out.print("\nRoll No. : ");
			int rollno = sc.nextInt();
			System.out.print("Percentage : " );
			double percent = sc.nextDouble();

			System.out.print("\nEntered Student Type  : \nFor College press  : 1\nFor School press   : 2\nOnly Student press : 3\n" );
			int str = sc.nextInt();
			if(str == 1){
			
				System.out.print("Semester No. : ");
				int semester = sc.nextInt();
				arr1[i] = new CollegeStudent(rollno,percent,semester);
				
			}
			else if(str == 2){
				System.out.print("Class Name '10th', '12th' : ");
				String className = sc.next();
				arr1[i] = new SchoolStudent(rollno,percent,className);

			}
			else {
				arr1[i] = new Student1(rollno,percent);
			}
		}
		int flag = 0;
		System.out.println("\nDisplaying Array of College Student and School Student : ");
		for(Student1 i : arr1){
			i.show();
		}
		
		System.out.print("\nEnter the Roll No. to check : ");
		int rollno = sc.nextInt();
		int count = 0;
		for(Student1 i : arr1){
			if(i.getRollNo() == rollno){
				if(i instanceof CollegeStudent){
						System.out.println("\nRoll No. : " + rollno + " is CollegeStudent");
						flag = 1;
				}
				else if(i instanceof SchoolStudent){
						System.out.println("\nRoll No. : " + rollno + " is School Student");
						flag = 1;
				}
				else{
						System.out.println("\nRoll No. : " + rollno + " is (only) Student");
						flag = 1;
				}
			}
			if(i.getPercentage() > 75){
				count++;
			}
		}
		if(flag == 0){
			System.out.println("\nRoll No. : "+ rollno + " not Found !!!");
		}
		System.out.println("\n\nTotal No. Students having 'A' grade are : "+ count);
	}
}	

====================================================================

46.	Create a program to demonstrate the use of instanceof operator or secure reference down casting.

class Parent{
	public int x;
	
	Parent(){
		x = 1;
	}
	Parent(int x){
		this.x = x;
	}
	
	void show(){
		System.out.println("Parent class X = "+x);	
	}
}

class Child1 extends Parent{
	public int y;
	Child1(){
		y = 2;
	}
	Child1(int y){
		this.y = y;
	}
	
	void show(){
		System.out.println("1 Child class Y = "+y);
	}
}

class Child2 extends Parent{
	public int z;
	Child2(){
		z = 2;
	}
	Child2(int z){
		this.z = z;
	}
	
	void show(){
		System.out.println("2 Child class Z = "+z);
	}
}
class Que46{
	public static void main(String []args){

		Parent p1 = new Child1(8);  	// upcasting
		p1.show();   			// 1 Child class Y = 8

		Parent p2 = new Child2(10);
		p2.show();  			// 2 Child class Z = 10

		if(p1 instanceof Child1){
			System.out.println("p1 is Instance of Child 1");  //  p1 is Instance of Child 1
		}
		else if(p1 instanceof Child2){
			System.out.println("p1 Instance of Child 2");
		}
		else if(p1 instanceof Parent){
			System.out.println("p1 Instance of Parent");
		}
		
		Child2 p3 = (Child2) p2;  //downcating
		
		if(p3 instanceof Child2){
			 
			System.out.println("p3 Instance of Child 2");   // p3 Instance of Child 2
		}
		p3.show();    // 2 Child class Z = 10
	}
}


